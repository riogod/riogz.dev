name: Build and deploy API
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Build to:'
        required: true
        default: 'staged'
        type: choice
        options:
          - production
          - staged

env:
  DOCKER_HUB_USER: riogod
  IMAGE_NAME: riogz.dev

jobs:
  docker:
    name: Make docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}
          tags: latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: packages/api/prod.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            "api"
            ${{ steps.meta.outputs.labels }}
          secrets: |
            "NODE_ENV=${{ env.NODE_ENV }}"
            "APP_PORT=${{ env.APP_PORT }}"
            "APP_NAME=${{ env.APP_NAME }}"
            "API_PREFIX=${{ env.API_PREFIX }}"
            "APP_FALLBACK_LANGUAGE=${{ env.APP_FALLBACK_LANGUAGE }}"
            "APP_HEADER_LANGUAGE=${{ env.APP_HEADER_LANGUAGE }}"
            "FRONTEND_DOMAIN=${{ env.FRONTEND_DOMAIN }}"
            "BACKEND_DOMAIN=${{ env.BACKEND_DOMAIN }}"
            "DATABASE_TYPE=${{ env.DATABASE_TYPE }}"
            "DATABASE_HOST=${{ env.DATABASE_HOST }}"
            "DATABASE_PORT=${{ env.DATABASE_PORT }}"
            "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}"
            "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}"
            "DATABASE_NAME=${{ env.DATABASE_NAME }}"
            "DATABASE_SYNCHRONIZE=${{ env.DATABASE_SYNCHRONIZE }}"
            "DATABASE_MAX_CONNECTIONS=${{ env.DATABASE_MAX_CONNECTIONS }}"
            "DATABASE_SSL_ENABLED=${{ env.DATABASE_SSL_ENABLED }}"
            "DATABASE_REJECT_UNAUTHORIZED=${{ env.DATABASE_REJECT_UNAUTHORIZED }}"
            "DATABASE_CA=${{ env.DATABASE_CA }}"
            "DATABASE_KEY=${{ env.DATABASE_KEY }}"
            "DATABASE_CERT=${{ env.DATABASE_CERT }}"
            "AUTH_JWT_SECRET=${{ secrets.AUTH_JWT_SECRET }}"
            "AUTH_JWT_TOKEN_EXPIRES_IN=${{ env.AUTH_JWT_TOKEN_EXPIRES_IN }}"
            "AUTH_REFRESH_SECRET=${{ secrets.AUTH_REFRESH_SECRET }}"
            "AUTH_REFRESH_TOKEN_EXPIRES_IN=${{ env.AUTH_REFRESH_TOKEN_EXPIRES_IN }}"
            "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}"
            "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
            "WORKER_HOST=${{ secrets.WORKER_HOST }}"
#
#  run:
#    name: Update image
#    runs-on: ubuntu-latest
#    needs: docker
#    steps:
#      - name: multiple command
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_SERVER_USER }}
#          key: ${{ secrets.SSH_SERVER_SSHKEY }}
#          port: ${{ secrets.SSH_PORT }}
#          script: |
#            docker pull ${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:latest
#            docker stop helloworld
#            docker compose -f /usr/local/riogz.dev/docker-compose.yml up -d helloworld
#            docker rmi $(docker images -f=reference='riogod/riogz.dev-client' -f dangling=true -q) -f